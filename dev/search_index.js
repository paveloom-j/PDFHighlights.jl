var documenterSearchIndex = {"docs":
[{"location":"lib/internals/CSV/#CSVPage","page":"CSV","title":"CSV","text":"","category":"section"},{"location":"lib/internals/CSV/#Module","page":"CSV","title":"Module","text":"","category":"section"},{"location":"lib/internals/CSV/","page":"CSV","title":"CSV","text":"Modules = [PDFHighlights.Internal.CSV]\nOrder = [:module]","category":"page"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV","page":"CSV","title":"PDFHighlights.Internal.CSV","text":"This module contains functions that can only be applied to CSV files.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/CSV/#Functions","page":"CSV","title":"Functions","text":"","category":"section"},{"location":"lib/internals/CSV/","page":"CSV","title":"CSV","text":"Modules = [PDFHighlights.Internal.CSV]\nOrder = [:function]","category":"page"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV._check-Tuple{String}","page":"CSV","title":"PDFHighlights.Internal.CSV._check","text":"_check(csv::String) -> Nothing\n\nCheck the structural integrity of the CSV file (see the exceptions list).\n\nArguments\n\ncsv::String: absolute or relative path to the CSV file\n\nThrows\n\nIncorrectHeader: the specified file has an incorrect header\nLastElementIsNotAnInteger: the last element in the line is not an integer\nNotSixColumns: the row does not represent elements for 6 columns\n\nExample\n\nusing PDFHighlights\n\n_file, io = mktemp()\nprintln(io, \"Highlight,Title,Author,URL,Note,Location\")\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nPDFHighlights.Internal.CSV._check(file)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV._get_authors_from_CSV-Tuple{String}","page":"CSV","title":"PDFHighlights.Internal.CSV._get_authors_from_CSV","text":"_get_authors_from_CSV(csv::String) -> Vector{String}\n\nExtract the values of the Author column from the CSV file.\n\nArguments\n\ncsv::String: absolute or relative path to the CSV file\n\nReturns\n\nVector{String}: the authors\n\nThrows\n\nExceptions from: get_all\n\nExample\n\nusing PDFHighlights\n\n_file, io = mktemp()\nprintln(io, \"Highlight,Title,Author,URL,Note,Location\", '\\n', \",,Susanna Kaysen,,,1\")\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nPDFHighlights.Internal.CSV._get_authors_from_CSV(file) == [\"Susanna Kaysen\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV._get_highlights_from_CSV-Tuple{String}","page":"CSV","title":"PDFHighlights.Internal.CSV._get_highlights_from_CSV","text":"_get_highlights_from_CSV(csv::String) -> Vector{String}\n\nExtract the values of the Highlight column from the CSV file.\n\nArguments\n\ncsv::String: absolute or relative path to the CSV file\n\nReturns\n\nVector{String}: the highlights\n\nThrows\n\nExceptions from: get_all\n\nExample\n\nusing PDFHighlights\n\n_file, io = mktemp()\nprintln(\n    io,\n    \"Highlight,Title,Author,URL,Note,Location\\n\",\n    \"The world didn't stop spinning,,,,,1\",\n)\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nPDFHighlights.Internal.CSV._get_highlights_from_CSV(file) ==\n[\"The world didn't stop spinning\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV._get_titles_from_CSV-Tuple{String}","page":"CSV","title":"PDFHighlights.Internal.CSV._get_titles_from_CSV","text":"_get_titles_from_CSV(csv::String) -> Vector{String}\n\nExtract the values of the Title column from the CSV file.\n\nArguments\n\ncsv::String: absolute or relative path to the CSV file\n\nReturns\n\nVector{String}: the titles\n\nThrows\n\nExceptions from: get_all\n\nExample\n\nusing PDFHighlights\n\n_file, io = mktemp()\nprintln(io, \"Highlight,Title,Author,URL,Note,Location\\n\", \",\\\"Girl, Interrupted\\\",,,,1\")\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nPDFHighlights.Internal.CSV._get_titles_from_CSV(file) == [\"Girl, Interrupted\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV.get_all-Tuple{String}","page":"CSV","title":"PDFHighlights.Internal.CSV.get_all","text":"get_all(csv::String) -> Tuple{\n    Vector{String},\n    Vector{String},\n    Vector{String},\n    Vector{String},\n    Vector{String},\n    Vector{Int32},\n}\n\nExtract the values of all columns from the CSV file.\n\nArguments\n\ncsv::String: absolute or relative path to the CSV file\n\nReturns\n\nTuple{...}: the highlights, titles, authors, URLs, notes, and locations\n\nThrows\n\nIntegrityCheckFailed: another exception was thrown while checking the integrity of the table\nExceptions from: initialize\n\nExample\n\nusing PDFHighlights\n\n_file, io = mktemp()\nprintln(\n    io,\n    \"Highlight,Title,Author,URL,Note,Location\\n\",\n    string(\n        \"The world didn't stop spinning,\",\n        \"\\\"Girl, Interrupted\\\",\",\n        \"Susanna Kaysen,\",\n        \"https://www.imdb.com/title/tt0172493,\",\n        \"Journal,\",\n        \"5722\",\n    ),\n)\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nget_all(file) == (\n    [\"The world didn't stop spinning\"],\n    [\"Girl, Interrupted\"],\n    [\"Susanna Kaysen\"],\n    [\"https://www.imdb.com/title/tt0172493\"],\n    [\"Journal\"],\n    [5722],\n)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV.get_locations-Tuple{String}","page":"CSV","title":"PDFHighlights.Internal.CSV.get_locations","text":"get_locations(csv::String) -> Vector{Int32}\n\nExtract the values of the Location column from the CSV file.\n\nArguments\n\ncsv::String: absolute or relative path to the CSV file\n\nReturns\n\nVector{Int32}: the locations\n\nThrows\n\nExceptions from: get_all\n\nExample\n\nusing PDFHighlights\n\n_file, io = mktemp()\nprintln(io, \"Highlight,Title,Author,URL,Note,Location\\n\", \",,,,,5722\")\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nget_locations(file) == Int32[5722]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV.get_notes-Tuple{String}","page":"CSV","title":"PDFHighlights.Internal.CSV.get_notes","text":"get_notes(csv::String) -> Vector{String}\n\nExtract the values of the Note column from the CSV file.\n\nArguments\n\ncsv::String: absolute or relative path to the CSV file\n\nReturns\n\nVector{String}: the notes\n\nThrows\n\nExceptions from: get_all\n\nExample\n\nusing PDFHighlights\n\n_file, io = mktemp()\nprintln(io, \"Highlight,Title,Author,URL,Note,Location\\n\", \",,,,Journal,\")\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nget_notes(file) == [\"Journal\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV.get_urls-Tuple{String}","page":"CSV","title":"PDFHighlights.Internal.CSV.get_urls","text":"get_urls(csv::String) -> Vector{String}\n\nExtract the values of the URL column from the CSV file.\n\nArguments\n\ncsv::String: absolute or relative path to the CSV file\n\nReturns\n\nVector{String}: the URLs\n\nThrows\n\nExceptions from: get_all\n\nExample\n\nusing PDFHighlights\n\n_file, io = mktemp()\nprintln(\n    io,\n    \"Highlight,Title,Author,URL,Note,Location\\n\",\n    \",,,https://www.imdb.com/title/tt0172493,,\"\n)\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nget_urls(file) == [\"https://www.imdb.com/title/tt0172493\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV.import_highlights-Tuple{String,String}","page":"CSV","title":"PDFHighlights.Internal.CSV.import_highlights","text":"import_highlights(csv::String, target::String; quiet::Bool=false) -> Nothing\n\nExtract the values of the URL column from the CSV file.\n\nArguments\n\ncsv::String: absolute or relative path to the CSV file\ntarget::String: a PDF file or a directory with PDF files\n\nKeywords\n\nquiet::Bool=false: if true, don't print to standard output\n\nThrows\n\nIntegrityCheckFailed: another exception was thrown while checking the integrity of the table\nExceptions from: initialize\n\nExample\n\nusing PDFHighlights\nusing Suppressor\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\npath_to_pdf = joinpath(path_to_pdf_dir, \"TestPDF.pdf\")\n\n_file, io = mktemp()\nfile = _file * \".csv\"\nmv(_file, file)\n\n(@capture_out(import_highlights(file, path_to_pdf)) ==\n\"\"\"\n\n    CSV: \"$(basename(file))\"\n    PDF: \"TestPDF.pdf\"\n    Highlights (found / added): 7 / 7\n\n\"\"\") |> println\n\n(@capture_out(import_highlights(file, path_to_pdf; quiet=true)) == \"\") |> println\n\n@capture_out(import_highlights(file, path_to_pdf_dir)) ==\n\"\"\"\n\n    CSV: \"$(basename(file))\"\n    Directory: \"pdf\"\n    Highlights (found / added): 7 / 0\n\n\"\"\"\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV.initialize-Tuple{String}","page":"CSV","title":"PDFHighlights.Internal.CSV.initialize","text":"initialize(csv::String) -> Nothing\n\nIf the file along the csv path does not exist, then create it and write the header; if it exists but empty, do the same; if it exists and is not empty, check structural correctness.\n\nArguments\n\ncsv::String: absolute or relative path to the CSV file\n\nThrows\n\nNotCSV: the specified path does not end in .csv\nExceptions from: _check\n\nExample\n\nusing PDFHighlights\n\n_file, _ = mktemp()\nfile = _file * \".csv\"\nmv(_file, file)\n\ninitialize(file)\n\nopen(file, \"r\") do io\n    readlines(io) == [\"Highlight,Title,Author,URL,Note,Location\"]\nend\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/CSV/#Macros","page":"CSV","title":"Macros","text":"","category":"section"},{"location":"lib/internals/CSV/","page":"CSV","title":"CSV","text":"Modules = [PDFHighlights.Internal.CSV]\nOrder = [:macro]","category":"page"},{"location":"lib/internals/CSV/#PDFHighlights.Internal.CSV.@extract-Tuple{Symbol}","page":"CSV","title":"PDFHighlights.Internal.CSV.@extract","text":"@extract(array::Symbol) -> Expr\n\nGet a piece of line (a highlight, an author, a title, etc.).\n\nArguments\n\narray::Symbol: the name of the array to which this piece refers\n\nReturns\n\nExpr: the code extracting the piece and putting it into the corresponding array\n\nExample\n\nusing PDFHighlights\nusing SyntaxTree\n\n(@macroexpand(PDFHighlights.Internal.CSV.@extract(highlights)) |> linefilter! ==\nquote\n    if current_comma_index == 1\n        highlights[line_index] = \"\"\n    else\n        piece = line[1:(current_comma_index - 1)]\n        if piece == \"\\\"\\\"\"\n            highlights[line_index] = \"\"\n        elseif startswith(piece, \"\\\"\")\n            highlights[line_index] = chop(piece; head = 1, tail = 1)\n        else\n            highlights[line_index] = piece\n        end\n    end\nend |> linefilter!) |> println\n\n(@macroexpand(PDFHighlights.Internal.CSV.@extract(locations)) |> linefilter! ==\nquote\n    if current_comma_index == lastindex(line)\n        locations[line_index] = 0\n    else\n        locations[line_index] = parse(\n            Int32,\n            line[(current_comma_index + 1):end],\n        )\n    end\nend |> linefilter!) |> println\n\narray = :titles\n\n@macroexpand(PDFHighlights.Internal.CSV.@extract(titles)) |> linefilter! ==\nquote\n    if current_comma_index == previous_comma_index + 1\n        $(array)[line_index] = \"\"\n    else\n        piece = line[(previous_comma_index + 1):(current_comma_index - 1)]\n        if piece == \"\\\"\\\"\"\n            $(array)[line_index] = \"\"\n        elseif startswith(piece, \"\\\"\")\n            $(array)[line_index] = chop(piece; head = 1, tail = 1)\n        else\n            $(array)[line_index] = piece\n        end\n    end\nend |> linefilter!\n\n\n\n\n\n","category":"macro"},{"location":"lib/public/#PublicInterface","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#ExtractingData","page":"Public","title":"Extracting data","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"List of functions to extract data from either PDF or CSV files:","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"get_all (CSV)\nget_author (PDF)\nget_author_title (PDF)\nget_authors (CSV, DIR)\nget_authors_titles (DIR)\nget_comments (PDF, DIR)\nget_comments_pages (PDF, DIR)\nget_highlights (CSV, PDF, DIR)\nget_highlights_comments (PDF, DIR)\nget_highlights_comments_pages (PDF, DIR)\nget_highlights_pages (PDF, DIR)\nget_locations (CSV)\nget_notes (CSV)\nget_pages (PDF, DIR)\nget_title (PDF)\nget_titles (CSV, DIR)\nget_urls (CSV)","category":"page"},{"location":"lib/public/#Initializing-and-importing","page":"Public","title":"Initializing and importing","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"List of functions to create a CSV file:","category":"page"},{"location":"lib/public/","page":"Public","title":"Public","text":"import_highlights\ninitialize","category":"page"},{"location":"lib/internals/PDF/#PDFPage","page":"PDF","title":"PDF","text":"","category":"section"},{"location":"lib/internals/PDF/#Module","page":"PDF","title":"Module","text":"","category":"section"},{"location":"lib/internals/PDF/","page":"PDF","title":"PDF","text":"Modules = [PDFHighlights.Internal.PDF]\nOrder = [:module]","category":"page"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF","page":"PDF","title":"PDFHighlights.Internal.PDF","text":"This module contains functions that can only be applied to PDF files.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/PDF/#Functions","page":"PDF","title":"Functions","text":"","category":"section"},{"location":"lib/internals/PDF/","page":"PDF","title":"PDF","text":"Modules = [PDFHighlights.Internal.PDF]\nOrder = [:function]","category":"page"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF._concatenate-Tuple{Array{String,1},Array{String,1},Array{Int32,1}}","page":"PDF","title":"PDFHighlights.Internal.PDF._concatenate","text":"_concatenate(\n    highlights::Vector{String},\n    comments::Vector{String},\n    pages::Vector{Int32},\n) -> Tuple{Vector{String}, Vector{String}, Vector{Int32}}\n\nConcatenate highlights based on comments; merge pages.\n\nArguments\n\nhighlights::Vector{String}: the highlights vector\ncomments::Vector{String}: the comments vector\npages::Vector{Int32}: the pages vector\n\nReturns\n\nTuple{Vector{String}, Vector{String}, Vector{Int32}}: the concatenated arguments\n\nExample\n\nusing PDFHighlights\n\nPDFHighlights.Internal.PDF._concatenate(\n    String[\"Highlight 1\", \"High-\", \"light 2\"],\n    String[\"Comment 1\", \".c1 Comment 2\", \".c2\"],\n    Int32[1, 2, 3],\n) ==\n(\n    String[\"Highlight 1\", \"Highlight 2\"],\n    String[\"Comment 1\", \"Comment 2\"],\n    Int32[1, 2],\n)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF._get_authors_from_PDF-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF._get_authors_from_PDF","text":"_get_authors_from_PDF(dir::String) -> Vector{String}\n\nExtract all authors from all PDFs found recursively in the passed directory.\n\nArguments\n\ndir::String: a directory with PDF files\n\nReturns\n\nVector{String}: the authors\n\nThrows\n\nExceptions from: get_authors_titles\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\n\nPDFHighlights.Internal.PDF._get_authors_from_PDF(path_to_pdf_dir) == [\"Pavel Sobolev\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF._get_highlights_from_PDF-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF._get_highlights_from_PDF","text":"_get_highlights_from_PDF(target::String; concatenate::Bool=true) -> Vector{String}\n\nExtract all highlights from a passed PDF or all PDFs found recursively in the passed directory.\n\nArguments\n\ntarget::String: a PDF file or a directory with PDF files\n\nKeywords\n\nconcatenate::Bool=true: if true, concatenate the highlights\n\nReturns\n\nVector{String}: the highlights\n\nThrows\n\nExceptions from: get_highlights_comments_pages\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\npath_to_pdf = joinpath(path_to_pdf_dir, \"TestPDF.pdf\")\n\nPDFHighlights.Internal.PDF._get_highlights_from_PDF(path_to_pdf_dir) ==\nPDFHighlights.Internal.PDF._get_highlights_from_PDF(path_to_pdf) ==\nString[\n    \"Highlight 1\",\n    \"Highlight 2 Highlight 3\",\n    \"Highlight 4\",\n    \"Highhighlight 5\",\n    \"6th Highhigh light-\",\n    \"High light 7\",\n    \"8th Highlight-\",\n]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF._get_titles_from_PDF-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF._get_titles_from_PDF","text":"_get_titles_from_PDF(target::String) -> Vector{String}\n\nExtract all titles from all PDFs found recursively in the passed directory.\n\nArguments\n\ndir::String: a directory with PDF files\n\nReturns\n\nVector{String}: the titles\n\nThrows\n\nExceptions from: get_authors_titles\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\n\nPDFHighlights.Internal.PDF._get_titles_from_PDF(path_to_pdf_dir) ==\n[\"A dummy PDF for tests\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF._sort!-Tuple{Array{String,1},Array{Float64,1},Array{Float64,1},Array{Float64,1}}","page":"PDF","title":"PDFHighlights.Internal.PDF._sort!","text":"_sort!(\n    lines::Vector{String},\n    lines_x_anchors::Vector{Float64},\n    lines_yl_anchors::Vector{Float64},\n    lines_yu_anchors::Vector{Float64},\n) -> Vector{String}\n\nSort the lines vector using the arrays of anchors. Basic principle: if rectangles cross by ordinate, sort them by abscissa.\n\nArguments\n\nlines::Vector{String}: the lines vector of the highlight (text found in the rectangles of the highlight)\nlines_x_anchors::Vector{Float64}: the coordinate vector of the abscissa of the left side of the highlight rectangles\nlines_yl_anchors::Vector{Float64}: the coordinate vector of the ordinate of the lower-left corner of the highlight rectangles\nlines_yu_anchors::Vector{Float64}: the coordinate vector of the ordinate of the upper-left corner of the highlight rectangles\n\nReturns\n\nVector{String}: the sorted lines vector of the highlight\n\nExample\n\nusing PDFHighlights\n\nlines = [\"High\", \"high\", \"light\"]\nquad_x_anchors = [0.21, 0.15, 0.17]\nquad_yl_anchors = [0.10, 0.10, 0.10]\nquad_yu_anchors = [0.15, 0.12, 0.15]\n\nPDFHighlights.Internal.PDF._sort!(\n    lines,\n    quad_x_anchors,\n    quad_yl_anchors,\n    quad_yu_anchors,\n) == [\"high\", \"light\", \"High\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF._sort!-Tuple{Array{String,1},Array{String,1},Array{Int32,1},Array{Float64,1},Array{Float64,1},Array{Float64,1}}","page":"PDF","title":"PDFHighlights.Internal.PDF._sort!","text":"_sort!(\n    highlights::Vector{String},\n    comments::Vector{String},\n    pages::Vector{Int32},\n    highlights_x_anchors::Vector{Float64},\n    highlights_yl_anchors::Vector{Float64},\n    highlights_yu_anchors::Vector{Float64},\n) -> Tuple{Vector{String}, Vector{String}}\n\nSort the highlights and comments vectors using the arrays of anchors and pages. Basic principle: if highlights cross by ordinate, sort them by abscissa.\n\nArguments\n\nhighlights::Vector{String}: the highlights\ncomments::Vector{String}: the comments\npages::Vector{Int32}: the pages\nhighlights_x_anchors::Vector{Float64}: the coordinate vector of the abscissa of the left side of the upper-left rectangle of the highlight\nhighlights_yl_anchors::Vector{Float64}: the coordinate vector of the ordinate of the lower-left corner of the lower-left rectangle of the highlight\nhighlights_yu_anchors::Vector{Float64}: the coordinate vector of the ordinate of the upper-left corner of the upper-left rectangle of the highlight\n\nReturns\n\nTuple{Vector{String}, Vector{String}}: the sorted vectors of the highlights and comments\n\nExample\n\nusing PDFHighlights\n\nhighlights = [\"High\", \"high\", \"light\"]\ncomments = [\"Com\", \"com\", \"ment\"]\npages = Int32[1, 1, 1]\nhighlights_x_anchors = [0.21, 0.15, 0.17]\nhighlights_yl_anchors = [0.10, 0.10, 0.10]\nhighlights_yu_anchors = [0.12, 0.15, 0.15]\n\nPDFHighlights.Internal.PDF._sort!(\n    highlights,\n    comments,\n    pages,\n    highlights_x_anchors,\n    highlights_yl_anchors,\n    highlights_yu_anchors,\n) ==\n(\n    [\"high\", \"light\", \"High\"],\n    [\"com\", \"ment\", \"Com\"],\n)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.get_author-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF.get_author","text":"get_author(pdf::String) -> String\n\nExtract the author from the PDF.\n\nArguments\n\npdf::String: absolute or relative path to the PDF file\n\nReturns\n\nString: the author\n\nThrows\n\nExceptions from: get_author_title\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf = joinpath(\n    pathof(PDFHighlights) |> dirname |> dirname,\n    \"test\",\n    \"pdf\",\n    \"TestPDF.pdf\"\n)\n\nget_author(path_to_pdf) == \"Pavel Sobolev\"\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.get_author_title-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF.get_author_title","text":"get_author_title(pdf::String) -> Tuple{String, String}\n\nExtract the author and title from the PDF.\n\nArguments\n\npdf::String: absolute or relative path to the PDF file\n\nReturns\n\nTuple{String, String}: the author and title\n\nThrows\n\nFileDoesNotExist: the specified file doesn't exist\nNotPDF: the specified path does not end in .pdf\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf = joinpath(\n    pathof(PDFHighlights) |> dirname |> dirname,\n    \"test\",\n    \"pdf\",\n    \"TestPDF.pdf\",\n)\n\nget_author_title(path_to_pdf) == (\"Pavel Sobolev\", \"A dummy PDF for tests\")\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.get_authors_titles-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF.get_authors_titles","text":"get_authors_titles(dir::String) -> Tuple{Vector{String}, Vector{String}}\n\nExtract the authors and titles from all PDFs found recursively in the passed directory.\n\nArguments\n\ndir::String: a directory with PDF files\n\nReturns\n\nTuple{Vector{String}, Vector{String}}: the authors and titles\n\nThrows\n\nDirectoryDoesNotExist: the specified directory doesn't exist\nExceptions from: get_author_title\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\n\nget_authors_titles(path_to_pdf_dir) == ([\"Pavel Sobolev\"], [\"A dummy PDF for tests\"])\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.get_comments-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF.get_comments","text":"get_comments(target::String; concatenate::Bool=false) -> Vector{String}\n\nExtract the comments from a passed PDF or all PDFs found recursively in the passed directory.\n\nArguments\n\ntarget::String: a PDF file or a directory with PDF files\n\nKeywords\n\nconcatenate::Bool=false: if true, concatenate the highlights\n\nReturns\n\nVector{String}: the comments\n\nThrows\n\nExceptions from: get_highlights_comments_pages\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\npath_to_pdf = joinpath(path_to_pdf_dir, \"TestPDF.pdf\")\n\nget_comments(path_to_pdf_dir; concatenate=true) ==\nget_comments(path_to_pdf; concatenate=true) ==\n[\"Comment 1\", \"Comment 2 Comment 3\", \"Comment 4\", \"\", \"\", \"\", \"\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.get_comments_pages-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF.get_comments_pages","text":"get_comments_pages(\n    target::String;\n    concatenate::Bool=false,\n) -> Tuple{Vector{String}, Vector{Int32}}\n\nExtract the comments and pages from a passed PDF or all PDFs found recursively in the passed directory.\n\nArguments\n\ntarget::String: a PDF file or a directory with PDF files\n\nKeywords\n\nconcatenate::Bool=false: if true, concatenate the highlights\n\nReturns\n\nTuple{Vector{String}, Vector{Int32}}: the comments and pages\n\nThrows\n\nExceptions from: get_highlights_comments_pages\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\npath_to_pdf = joinpath(path_to_pdf_dir, \"TestPDF.pdf\")\n\nget_comments_pages(path_to_pdf_dir; concatenate=true) ==\nget_comments_pages(path_to_pdf; concatenate=true) ==\n(\n    String[\"Comment 1\", \"Comment 2 Comment 3\", \"Comment 4\", \"\", \"\", \"\", \"\"],\n    Int32[1, 2, 4, 6, 7, 8, 9],\n)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.get_highlights_comments-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF.get_highlights_comments","text":"get_highlights_comments(\n    target::String;\n    concatenate::Bool=true\n) -> Tuple{Vector{String}, Vector{String}}\n\nExtract the highlights and comments from a passed PDF or all PDFs found recursively in the passed directory.\n\nArguments\n\ntarget::String: a PDF file or a directory with PDF files\n\nKeywords\n\nconcatenate::Bool=true: if true, concatenate the highlights\n\nReturns\n\nTuple{Vector{String}, Vector{String}}: the highlights and comments\n\nThrows\n\nExceptions from: get_highlights_comments_pages\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\npath_to_pdf = joinpath(path_to_pdf_dir, \"TestPDF.pdf\")\n\nget_highlights_comments(path_to_pdf_dir) ==\nget_highlights_comments(path_to_pdf) ==\n(\n    [\n        \"Highlight 1\",\n        \"Highlight 2 Highlight 3\",\n        \"Highlight 4\",\n        \"Highhighlight 5\",\n        \"6th Highhigh light-\",\n        \"High light 7\",\n        \"8th Highlight-\",\n    ],\n    [\"Comment 1\", \"Comment 2 Comment 3\", \"Comment 4\", \"\", \"\", \"\", \"\"],\n)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.get_highlights_comments_pages-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF.get_highlights_comments_pages","text":"get_highlights_comments_pages(\n    target::String;\n    concatenate::Bool=true\n) -> Tuple{Vector{String}, Vector{String}, Vector{Int32}}\n\nExtract the highlights, comments, and pages from a passed PDF or all PDFs found recursively in the passed directory.\n\nArguments\n\ntarget::String: a PDF file or a directory with PDF files\n\nKeywords\n\nconcatenate::Bool=true: if true, concatenate the highlights\n\nReturns\n\nTuple{Vector{String}, Vector{String}, Vector{Int32}}: the highlights, comments, and pages\n\nThrows\n\nDoesNotExist: the specified file or directory doesn't exist\nNotPDF: the specified path does not end in .pdf\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\npath_to_pdf = joinpath(path_to_pdf_dir, \"TestPDF.pdf\")\n\nget_highlights_comments_pages(path_to_pdf_dir) ==\nget_highlights_comments_pages(path_to_pdf) ==\n(\n    [\n        \"Highlight 1\",\n        \"Highlight 2 Highlight 3\",\n        \"Highlight 4\",\n        \"Highhighlight 5\",\n        \"6th Highhigh light-\",\n        \"High light 7\",\n        \"8th Highlight-\",\n    ],\n    [\"Comment 1\", \"Comment 2 Comment 3\", \"Comment 4\", \"\", \"\", \"\", \"\"],\n    Int32[1, 2, 4, 6, 7, 8, 9],\n)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.get_highlights_pages-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF.get_highlights_pages","text":"get_highlights_pages(\n    target::String;\n    concatenate::Bool=true\n) -> Tuple{Vector{String}, Vector{Int32}}\n\nExtract the highlights and pages from a passed PDF or all PDFs found recursively in the passed directory.\n\nArguments\n\ntarget::String: a PDF file or a directory with PDF files\n\nKeywords\n\nconcatenate::Bool=true: if true, concatenate the highlights\n\nReturns\n\nTuple{Vector{String}, Vector{Int32}}: the highlights and pages\n\nThrows\n\nExceptions from: get_highlights_comments_pages\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\npath_to_pdf = joinpath(path_to_pdf_dir, \"TestPDF.pdf\")\n\nget_highlights_pages(path_to_pdf_dir) ==\nget_highlights_pages(path_to_pdf) ==\n(\n    [\n        \"Highlight 1\",\n        \"Highlight 2 Highlight 3\",\n        \"Highlight 4\",\n        \"Highhighlight 5\",\n        \"6th Highhigh light-\",\n        \"High light 7\",\n        \"8th Highlight-\",\n    ],\n    Int32[1, 2, 4, 6, 7, 8, 9],\n)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.get_pages-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF.get_pages","text":"get_pages(\n    target::String;\n    concatenate::Bool=false\n) -> Vector{Int32}\n\nExtract the pages from a passed PDF or all PDFs found recursively in the passed directory.\n\nArguments\n\ntarget::String: a PDF file or a directory with PDF files\n\nKeywords\n\nconcatenate::Bool=false: if true, concatenate the highlights\n\nReturns\n\nVector{Int32}: the pages\n\nThrows\n\nExceptions from: get_highlights_comments_pages\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\npath_to_pdf = joinpath(path_to_pdf_dir, \"TestPDF.pdf\")\n\nget_pages(path_to_pdf_dir) == get_pages(path_to_pdf) == Int32[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.get_title-Tuple{String}","page":"PDF","title":"PDFHighlights.Internal.PDF.get_title","text":"get_title(pdf::String) -> String\n\nExtract the title from the PDF.\n\nArguments\n\npdf::String: absolute or relative path to the PDF file\n\nReturns\n\nString: the title\n\nThrows\n\nExceptions from: get_author_title\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf = joinpath(\n    pathof(PDFHighlights) |> dirname |> dirname,\n    \"test\",\n    \"pdf\",\n    \"TestPDF.pdf\",\n)\n\nget_title(path_to_pdf) == \"A dummy PDF for tests\"\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/PDF/#Macros","page":"PDF","title":"Macros","text":"","category":"section"},{"location":"lib/internals/PDF/","page":"PDF","title":"PDF","text":"Modules = [PDFHighlights.Internal.PDF]\nOrder = [:macro]","category":"page"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.@unsafe_wrap-Tuple{Expr,Union{Expr, Symbol}}","page":"PDF","title":"PDFHighlights.Internal.PDF.@unsafe_wrap","text":"@unsafe_wrap(array::Expr, len::Union{Symbol, Expr}) -> Expr\n\nWrap a Julia Array object around the data at the address given by array pointer with length equal to len.\n\nArguments\n\narray::Expr: expression that will yield a pointer to the array data\nlen::Union{Symbol, Expr}: name of the variable which holds the length of this array, or an expression that will yield it\n\nReturns\n\nExpr: a wrapping expression\n\nExample\n\nusing PDFHighlights\n\n_array = :(array[index])\n_len = :len\n\n@macroexpand(PDFHighlights.Internal.PDF.@unsafe_wrap(array[index], len)) ==\n:(unsafe_wrap(Array, $(_array), $(_len); own = true))\n\nSee also: @unsafe_wrap_strings\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.@unsafe_wrap-Tuple{Symbol,Symbol}","page":"PDF","title":"PDFHighlights.Internal.PDF.@unsafe_wrap","text":"@unsafe_wrap(array::Symbol, len::Symbol) -> Expr\n\nWrap a Julia Array object around the data at the address given by array[] pointer with length equal to len[].\n\nArguments\n\narray::Symbol: name of the variable which holds the pointer to the array data\nlen::Symbol: name of the variable which holds the pointer to the length of this array\n\nReturns\n\nExpr: a wrapping expression\n\nExample\n\nusing PDFHighlights\n\n_array = :array\n_len = :len\n\n@macroexpand(PDFHighlights.Internal.PDF.@unsafe_wrap(array, len)) ==\n:(unsafe_wrap(Array, $(_array)[], $(_len)[]; own = true))\n\nSee also: @unsafe_wrap_strings\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/PDF/#PDFHighlights.Internal.PDF.@unsafe_wrap_strings-Tuple{Union{Expr, Symbol},Union{Expr, Symbol}}","page":"PDF","title":"PDFHighlights.Internal.PDF.@unsafe_wrap_strings","text":"@unsafe_wrap_strings(array::Union{Symbol, Expr}, len::Union{Symbol, Expr}) -> Expr\n\nWrap a Julia Array object around the array of C-style strings at the address given by array (or array[]) pointer with length equal to len (or len[]); convert each string to a Julia string encoded as UTF-8.\n\nArguments\n\narray::Union{Symbol, Expr}: name of the variable which holds the pointer to the array data, or expression that will yield it\nlen::Union{Symbol, Expr}: name of the variable which holds the length of this array (or a pointer to it), or expression that will yield it\n\nReturns\n\nExpr: a wrapping expression\n\nExample\n\nusing PDFHighlights\nusing PDFHighlights: Internal.PDF.@unsafe_wrap\n\n_array = :array\n_len = :len\n\n@macroexpand(PDFHighlights.Internal.PDF.@unsafe_wrap_strings(array, len)) ==\n:(unsafe_string.(unsafe_wrap(Array, $(_array)[], $(_len)[]; own = true)))\n\nSee also: @unsafe_wrap\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/Exceptions/#ExceptionsPage","page":"Exceptions","title":"Exceptions","text":"","category":"section"},{"location":"lib/internals/Exceptions/#Module","page":"Exceptions","title":"Module","text":"","category":"section"},{"location":"lib/internals/Exceptions/","page":"Exceptions","title":"Exceptions","text":"Modules = [PDFHighlights.Internal.Exceptions]\nOrder = [:module]","category":"page"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions","text":"This module contains all the exceptions used in the package, as well as the macro(s) that they were created by.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/Exceptions/#Types","page":"Exceptions","title":"Types","text":"","category":"section"},{"location":"lib/internals/Exceptions/","page":"Exceptions","title":"Exceptions","text":"Modules = [PDFHighlights.Internal.Exceptions]\nOrder = [:type]","category":"page"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.DirectoryDoesNotExist","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.DirectoryDoesNotExist","text":"DirectoryDoesNotExist <: Exception\n\nException thrown when the specified directory doesn't exist.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\n\nSee also: @exception_with_file\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.DoesNotExist","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.DoesNotExist","text":"DoesNotExist <: Exception\n\nException thrown when the specified file or directory doesn't exist.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\n\nSee also: @exception_with_file\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.FileDoesNotExist","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.FileDoesNotExist","text":"FileDoesNotExist <: Exception\n\nException thrown when the specified file doesn't exist.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\n\nSee also: @exception_with_file\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.IncorrectHeader","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.IncorrectHeader","text":"IncorrectHeader <: Exception\n\nException thrown when the specified file has an incorrect header.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\n\nSee also: @exception_with_file\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.IntegrityCheckFailed","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.IntegrityCheckFailed","text":"IntegrityCheckFailed <: Exception\n\nAn exception thrown when another exception was thrown while checking the integrity of the table.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\n\nSee also: @exception_with_file\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.LastElementIsNotAnInteger","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.LastElementIsNotAnInteger","text":"LastElementIsNotAnInteger <: Exception\n\nException thrown when the last element in the line is not an integer.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\nline::Int: line number of the specified file to which this exception is       associated\n\nSee also: @exception_with_line\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.NotCSV","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.NotCSV","text":"NotCSV <: Exception\n\nException thrown when the specified path does not end in .csv.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\n\nSee also: @exception_with_file\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.NotCSVorDir","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.NotCSVorDir","text":"NotCSVorDir <: Exception\n\nAn exception thrown when the specified path does not end in .csv ans is not a directory.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\n\nSee also: @exception_with_file\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.NotCSVorPDForDir","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.NotCSVorPDForDir","text":"NotCSVorPDForDir <: Exception\n\nAn exception thrown when the specified path does not end in .csv or .pdf and is not a directory.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\n\nSee also: @exception_with_file\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.NotPDF","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.NotPDF","text":"NotPDF <: Exception\n\nException thrown when the specified path does not end in .pdf.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\n\nSee also: @exception_with_file\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.NotSixColumns","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.NotSixColumns","text":"NotSixColumns <: Exception\n\nException thrown when the row does not represent elements for 6 columns.\n\nFields\n\nfile::String: absolute or relative path to a file that is associated with the       exception\nline::Int: line number of the specified file to which this exception is       associated\n\nSee also: @exception_with_line\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.OnlyOneContext","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.OnlyOneContext","text":"OnlyOneContext <: Exception\n\nException thrown when more than one context has been passed.\n\nSee also: @exception_without_fields\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.OnlyOneEquation","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.OnlyOneEquation","text":"OnlyOneEquation <: Exception\n\nException thrown when non-context equation has been passed.\n\nSee also: @exception_without_fields\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.SymbolIsNotSupported","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.SymbolIsNotSupported","text":"SymbolIsNotSupported <: Exception\n\nException thrown when the specified symbol is not supported.\n\nFields\n\nsymbol::Symbol: the symbol associated with the exception\n\nSee also: @exception_with_symbol\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/Exceptions/#Macros","page":"Exceptions","title":"Macros","text":"","category":"section"},{"location":"lib/internals/Exceptions/","page":"Exceptions","title":"Exceptions","text":"Modules = [PDFHighlights.Internal.Exceptions]\nOrder = [:macro]","category":"page"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.@docstring-Tuple{Symbol}","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.@docstring","text":"@docstring(macro_name::Symbol) -> Expr\n\nRedefine the docstring variable in the innermost macro.\n\nArguments\n\nmacro_name::Symbol: name of the macro that generated the exception\n\nReturns\n\nExpr: docstring redefinition\n\nExample\n\nusing PDFHighlights\nusing SyntaxTree\n\nmacro_name = QuoteNode(:name)\n\n@macroexpand(PDFHighlights.Internal.Exceptions.@docstring(name)) |> linefilter! ==\nquote\n    macro_name = $(macro_name)\n    docstring = Meta.quot(\n        \"\"\"\n            $(exception_name) <: Exception\n\n        $(docstring)\n\n        $(fields)\n\n        See also: [`@$(macro_name)`](@ref)\n        \"\"\"\n    )\nend |> linefilter!\n\nSee also: @exception\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.@exception-Tuple{Symbol,Vararg{Expr,N} where N}","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.@exception","text":"@exception(macro_name::Symbol, args::Expr...; context::Expr=:()) -> Expr\n\nCreate a macro to create exceptions. Optionally inject context before defining the structure.\n\nArguments\n\nmacro_name::Symbol: name of the macro\nargs::Tuple{Vararg{Expr}}: a set of fields to be defined in the exception structure\n\nKeywords\n\ncontext::Expr=:(): expression evaluated before defining the exception structure\n\nReturns\n\nExpr: new macro definition\n\nThrows\n\nOnlyOneContext: more than one context has been passed\nOnlyOneEquation: more than one equation has been passed\n\nExample\n\nusing PDFHighlights\nusing Suppressor\nusing SyntaxTree\n\nmacro_name = :name\nargs = (:(arg1::String), :(arg2::Int))\ncontext = :()\n\nd1 = @capture_out @macroexpand(\n    PDFHighlights.Internal.Exceptions.@exception(\n        name,\n        arg1::String,\n        arg2::Int,\n    )\n) |> linefilter! |> dump\n\nd2 = @capture_out quote\n    macro $(macro_name)(\n        exception_name::Symbol,\n        docstring::Union{Expr, String},\n        error_message_bits::Union{Expr, String}...,\n    )\n        module_name = __module__\n\n        args = $(args)\n        error_header = \"$(module_name).$(exception_name):\"\n\n        $(context)\n\n        return esc(\n            quote\n                @doc $(docstring)\n                mutable struct $(exception_name) <: Exception\n                    $(args...)\n                    $(exception_name)($(args...)) = new($(args...))\n                end\n\n                Base.showerror(io::IO, e::$(module_name).$(exception_name)) =\n                print(\n                    io, string(\n                        '\\n', '\\n',\n                        $(error_header), '\\n',\n                        $(error_message_bits...), '\\n',\n                    )\n                )\n            end\n        )\n    end\nend |> linefilter! |> dump\n\nd1 == d2\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.@exception_with_file-Tuple{Symbol,Union{Expr, String},Vararg{Union{Expr, String},N} where N}","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.@exception_with_file","text":"@exception_with_file(\n    exception_name::Symbol,\n    docstring::Union{Expr, String},\n    error_message_bits::Tuple{Vararg{Union{Expr, String}}},\n) -> Expr\n\nCreate an exception with one field: a path to the file.\n\nArguments\n\nexception_name::Symbol: name of the exception\ndocstring::Union{Expr, String}: documentation string\nerror_message_bits::Tuple{Vararg{Union{Expr, String}}}: strings and expressions which will be interpolated in the showerror output\n\nReturns\n\nExpr: an exception definition (struct + showerror overload)\n\nSee also: @exception\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.@exception_with_line-Tuple{Symbol,Union{Expr, String},Vararg{Union{Expr, String},N} where N}","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.@exception_with_line","text":"@exception_with_line(\n    exception_name::Symbol,\n    docstring::Union{Expr, String},\n    error_message_bits::Tuple{Vararg{Union{Expr, String}}},\n) -> Expr\n\nCreate an exception with two fields: a path to the file and a line number.\n\nArguments\n\nexception_name::Symbol: name of the exception\ndocstring::Union{Expr, String}: documentation string\nerror_message_bits::Tuple{Vararg{Union{Expr, String}}}: strings and expressions which will be interpolated in the showerror output\n\nReturns\n\nExpr: an exception definition (struct + showerror overload)\n\nSee also: @exception\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.@exception_with_symbol-Tuple{Symbol,Union{Expr, String},Vararg{Union{Expr, String},N} where N}","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.@exception_with_symbol","text":"@exception_with_symbol(\n    exception_name::Symbol,\n    docstring::Union{Expr, String},\n    error_message_bits::Tuple{Vararg{Union{Expr, String}}},\n) -> Expr\n\nCreate an exception with one field: a symbol.\n\nArguments\n\nexception_name::Symbol: name of the exception\ndocstring::Union{Expr, String}: documentation string\nerror_message_bits::Tuple{Vararg{Union{Expr, String}}}: strings and expressions which will be interpolated in the showerror output\n\nReturns\n\nExpr: an exception definition (struct + showerror overload)\n\nSee also: @exception\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.@exception_without_fields-Tuple{Symbol,Union{Expr, String},Vararg{Union{Expr, String},N} where N}","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.@exception_without_fields","text":"@exception_without_fields(\n    exception_name::Symbol,\n    docstring::Union{Expr, String},\n    error_message_bits::Tuple{Vararg{Union{Expr, String}}},\n) -> Expr\n\nCreate an exception with no fields.\n\nArguments\n\nexception_name::Symbol: name of the exception\ndocstring::Union{Expr, String}: documentation string\nerror_message_bits::Tuple{Vararg{Union{Expr, String}}}: strings and expressions which will be interpolated in the showerror output\n\nReturns\n\nExpr: an exception definition (struct + showerror overload)\n\nSee also: @exception\n\n\n\n\n\n","category":"macro"},{"location":"lib/internals/Exceptions/#PDFHighlights.Internal.Exceptions.@fields-Tuple{Vararg{String,N} where N}","page":"Exceptions","title":"PDFHighlights.Internal.Exceptions.@fields","text":"@fields(strings::String...) -> Expr\n\nDefine the fields variable in the innermost macro. This variable is a string that describes type fields.\n\nArguments\n\nstrings::Tuple{Vararg{String}}: strings to store in the fields variable\n\nReturns\n\nExpr: fields definition\n\nExample\n\nusing PDFHighlights\nusing SyntaxTree\n\nstrings = (\"`Cloverfield`: there's no place like home\",)\n\n@macroexpand(\n    PDFHighlights.Internal.Exceptions.@fields(\n        \"`Cloverfield`: there's no place like home\"\n    )\n) |> linefilter! == quote\n    strings = $(strings) |> collect\n    strings = join([\"- \" * string for string in strings], '\\n')\n    fields = \"\"\"\n    # Fields\\n\n    $(strings)\n    \"\"\"\nend |> linefilter!\n\nSee also: @exception\n\n\n\n\n\n","category":"macro"},{"location":"lib/#Package-Index","page":"Index","title":"Package Index","text":"","category":"section"},{"location":"lib/#PDF","page":"Index","title":"PDF","text":"","category":"section"},{"location":"lib/","page":"Index","title":"Index","text":"Pages = [\"internals/PDF.md\"]","category":"page"},{"location":"lib/#CSV","page":"Index","title":"CSV","text":"","category":"section"},{"location":"lib/","page":"Index","title":"Index","text":"Pages = [\"internals/CSV.md\"]","category":"page"},{"location":"lib/#Both","page":"Index","title":"Both","text":"","category":"section"},{"location":"lib/","page":"Index","title":"Index","text":"Pages = [\"internals/Both.md\"]","category":"page"},{"location":"lib/#Exceptions","page":"Index","title":"Exceptions","text":"","category":"section"},{"location":"lib/","page":"Index","title":"Index","text":"Pages = [\"internals/Exceptions.md\"]","category":"page"},{"location":"lib/#Constants","page":"Index","title":"Constants","text":"","category":"section"},{"location":"lib/","page":"Index","title":"Index","text":"Pages = [\"internals/Constants.md\"]","category":"page"},{"location":"lib/internals/Both/#BothPage","page":"Both","title":"Both","text":"","category":"section"},{"location":"lib/internals/Both/#Module","page":"Both","title":"Module","text":"","category":"section"},{"location":"lib/internals/Both/","page":"Both","title":"Both","text":"Modules = [PDFHighlights.Internal.Both]\nOrder = [:module]","category":"page"},{"location":"lib/internals/Both/#PDFHighlights.Internal.Both","page":"Both","title":"PDFHighlights.Internal.Both","text":"This module contains functions that can be applied to both PDF and CSV files.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/Both/#Functions","page":"Both","title":"Functions","text":"","category":"section"},{"location":"lib/internals/Both/","page":"Both","title":"Both","text":"Modules = [PDFHighlights.Internal.Both]\nOrder = [:function]","category":"page"},{"location":"lib/internals/Both/#PDFHighlights.Internal.Both.get_authors-Tuple{String}","page":"Both","title":"PDFHighlights.Internal.Both.get_authors","text":"get_authors(target::String) -> Vector{String}\n\nGet values from the Authors column if a CSV file is passed, or get the authors of all PDFs found recursively if a directory is passed.\n\nArguments\n\ntarget::String: a CSV file or a directory with PDF files\n\nReturns\n\nVector{String}: the authors\n\nThrows\n\nNotCSVorDir: the specified path does not end in .csv and is not a directory\nExceptions from: _get_authors_from_CSV, _get_authors_from_PDF\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\n\n(get_authors(path_to_pdf_dir) == [\"Pavel Sobolev\"]) |> println\n\n_file, io = mktemp()\nprintln(io, \"Highlight,Title,Author,URL,Note,Location\", '\\n', \",,Susanna Kaysen,,,1\")\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nget_authors(file) == [\"Susanna Kaysen\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/Both/#PDFHighlights.Internal.Both.get_highlights-Tuple{String}","page":"Both","title":"PDFHighlights.Internal.Both.get_highlights","text":"get_highlights(target::String; concatenate::Bool=true) -> Vector{String}\n\nGet values from the Highlights column if a CSV file is passed, or get the highlights from a PDF file if it is passed, or get the highlights from all PDFs found recursively if a directory is passed.\n\nArguments\n\ntarget::String: a CSV file, or a PDF file, or a directory with PDF files\n\nKeywords\n\nconcatenate::Bool=true: if true, concatenate the highlights (only for PDFs)\n\nReturns\n\nVector{String}: the highlights\n\nThrows\n\nNotCSVorPDForDir: the specified path does not end in .csv or .pdf and is not a directory\nExceptions from: _get_highlights_from_CSV, _get_highlights_from_PDF\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\npath_to_pdf = joinpath(path_to_pdf_dir, \"TestPDF.pdf\")\n\n(get_highlights(path_to_pdf_dir) == get_highlights(path_to_pdf) == String[\n    \"Highlight 1\",\n    \"Highlight 2 Highlight 3\",\n    \"Highlight 4\",\n    \"Highhighlight 5\",\n    \"6th Highhigh light-\",\n    \"High light 7\",\n    \"8th Highlight-\",\n]) |> println\n\n_file, io = mktemp()\nprintln(\n    io,\n    \"Highlight,Title,Author,URL,Note,Location\\n\",\n    \"The world didn't stop spinning,,,,,1\",\n)\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nget_highlights(file) == [\"The world didn't stop spinning\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/Both/#PDFHighlights.Internal.Both.get_titles-Tuple{String}","page":"Both","title":"PDFHighlights.Internal.Both.get_titles","text":"get_titles(target::String) -> Vector{String}\n\nGet values from the Titles column if a CSV file is passed, or get the titles of all PDFs found recursively if a directory is passed.\n\nArguments\n\ntarget::String: a CSV file or a directory with PDF files\n\nReturns\n\nVector{String}: the titles\n\nThrows\n\nNotCSVorDir: the specified path does not end in .csv and is not a directory\nExceptions from: _get_titles_from_CSV, _get_titles_from_PDF\n\nExample\n\nusing PDFHighlights\n\npath_to_pdf_dir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\n\n(get_titles(path_to_pdf_dir) == [\"A dummy PDF for tests\"]) |> println\n\n_file, io = mktemp()\nprintln(io, \"Highlight,Title,Author,URL,Note,Location\\n\", \",\\\"Girl, Interrupted\\\",,,,1\")\nflush(io)\nfile = _file * \".csv\"\nmv(_file, file)\n\nget_titles(file) == [\"Girl, Interrupted\"]\n\n\n\n\n\n","category":"method"},{"location":"manual/concatenation/#Concatenation","page":"Concatenation","title":"Concatenation","text":"","category":"section"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"Due to the limitations of the PDF format, creating highlights spanning two or more pages is rather complicated. Similar to Readwise's solution on this problem, this package supports the concatenation of highlights utilizing comments.","category":"page"},{"location":"manual/concatenation/#Concatenation-IDs","page":"Concatenation","title":"Concatenation IDs","text":"","category":"section"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"To connect two or more highlights, the comments of these highlights must start with the identifiers .c1, .c2, and so on. The order of the identifiers must coincide with the order of display of the highlights themselves: left to right, top-down within one page, and in ascending order of pages otherwise.","category":"page"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"Example: highlight with the text \"Hello\" and the comment \".c1 General\" on page 1, a highlight with the text \"there!\" and the comment \".c2 Kenobi\" on page 2. Concatenation result: highlight with the text \"Hello there!\" and the comment \"General Kenobi\".","category":"page"},{"location":"manual/concatenation/#Word-hyphenation","page":"Concatenation","title":"Word hyphenation","text":"","category":"section"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"Concatenation does some magic under the hood. It removes concatenation identifiers (even if the chain consists of one highlight) and also connects hyphenated words.","category":"page"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"Example: highlight with the text \"Mine-\" and the comment \".c1\" on page 1, a highlight with the text \"craft\" and the comment \".c2\" on page 2. Concatenation result: highlight with the text \"Minecraft\" and an empty comment.","category":"page"},{"location":"manual/concatenation/#The-keyword","page":"Concatenation","title":"The keyword","text":"","category":"section"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"The import_highlights function uses concatenation by default. Functions for getting pieces containing the word highlights, comments or pages in their name support the keyword concatenate.","category":"page"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"Example without concatenation:","category":"page"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"using PDFHighlights\npdf = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\", \"TestPDF.pdf\")","category":"page"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"get_highlights_comments(pdf; concatenate = false)","category":"page"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"Example with concatenation:","category":"page"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"get_highlights_comments(pdf)","category":"page"},{"location":"manual/concatenation/","page":"Concatenation","title":"Concatenation","text":"where pdf is the path to the PDF used by this package in the tests.","category":"page"},{"location":"lib/internals/Constants/#ConstantsPage","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"lib/internals/Constants/#Module","page":"Constants","title":"Module","text":"","category":"section"},{"location":"lib/internals/Constants/","page":"Constants","title":"Constants","text":"Modules = [PDFHighlights.Internal.Constants]\nOrder = [:module]","category":"page"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants","page":"Constants","title":"PDFHighlights.Internal.Constants","text":"This module contains all the constants used in the package, as well as the macro that they were created by.\n\n\n\n\n\n","category":"module"},{"location":"lib/internals/Constants/#Constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"lib/internals/Constants/","page":"Constants","title":"Constants","text":"Modules = [PDFHighlights.Internal.Constants]\nOrder = [:constant]","category":"page"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.COMMENTS_ARGUMENT","page":"Constants","title":"PDFHighlights.Internal.Constants.COMMENTS_ARGUMENT","text":"COMMENTS_ARGUMENT = \"the comments vector\"\n\nA documentation constant for the comments argument.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.CONCATENATE_BOTH_KEYWORD","page":"Constants","title":"PDFHighlights.Internal.Constants.CONCATENATE_BOTH_KEYWORD","text":"CONCATENATE_BOTH_KEYWORD = \"if `true`, concatenate the highlights (only for PDFs)\"\n\nA documentation constant for the concatenate keyword (for the Both module).\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.CONCATENATE_KEYWORD","page":"Constants","title":"PDFHighlights.Internal.Constants.CONCATENATE_KEYWORD","text":"CONCATENATE_KEYWORD = \"if `true`, concatenate the highlights\"\n\nA documentation constant for the concatenate keyword.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.CSV_ARGUMENT","page":"Constants","title":"PDFHighlights.Internal.Constants.CSV_ARGUMENT","text":"CSV_ARGUMENT = \"absolute or relative path to the CSV file\"\n\nA documentation constant for the csv argument.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.DIRECTORY_DOES_NOT_EXIST_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.DIRECTORY_DOES_NOT_EXIST_EXCEPTION","text":"DIRECTORY_DOES_NOT_EXIST_EXCEPTION = \"the specified directory doesn't exist\"\n\nA documentation constant for the DirectoryDoesNotExist exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.DIR_ARGUMENT","page":"Constants","title":"PDFHighlights.Internal.Constants.DIR_ARGUMENT","text":"DIR_ARGUMENT = \"a directory with PDF files\"\n\nA documentation constant for the dir argument.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.DOES_NOT_EXIST_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.DOES_NOT_EXIST_EXCEPTION","text":"DOES_NOT_EXIST_EXCEPTION = \"the specified file or directory doesn't exist\"\n\nA documentation constant for the DoesNotExist exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.FILE_DOES_NOT_EXIST_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.FILE_DOES_NOT_EXIST_EXCEPTION","text":"FILE_DOES_NOT_EXIST_EXCEPTION = \"the specified file doesn't exist\"\n\nA documentation constant for the FileDoesNotExist exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.HEADER","page":"Constants","title":"PDFHighlights.Internal.Constants.HEADER","text":"HEADER = \"Highlight,Title,Author,URL,Note,Location\"\n\nDefault (expected) header for CSV files.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.HIGHLIGHTS_ARGUMENT","page":"Constants","title":"PDFHighlights.Internal.Constants.HIGHLIGHTS_ARGUMENT","text":"HIGHLIGHTS_ARGUMENT = \"the highlights vector\"\n\nA documentation constant for the highlights argument.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.INCORRECT_HEADER_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.INCORRECT_HEADER_EXCEPTION","text":"INCORRECT_HEADER_EXCEPTION = \"the specified file has an incorrect header\"\n\nA documentation constant for the IncorrectHeader exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.INTEGRITY_CHECK_FAILED_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.INTEGRITY_CHECK_FAILED_EXCEPTION","text":"INTEGRITY_CHECK_FAILED_EXCEPTION = \"another exception was thrown while checking the integrity of the table\"\n\nA documentation constant for the IntegrityCheckFailed exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.LAST_ELEMENT_IS_NOT_AN_INTEGER_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.LAST_ELEMENT_IS_NOT_AN_INTEGER_EXCEPTION","text":"LAST_ELEMENT_IS_NOT_AN_INTEGER_EXCEPTION = \"the last element in the line is not an integer\"\n\nA documentation constant for the LastElementIsNotAnInteger exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.NOT_CSV_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.NOT_CSV_EXCEPTION","text":"NOT_CSV_EXCEPTION = \"the specified path does not end in `.csv`\"\n\nA documentation constant for the NotCSV exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.NOT_CSV_OR_DIR_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.NOT_CSV_OR_DIR_EXCEPTION","text":"NOT_CSV_OR_DIR_EXCEPTION = \"the specified path does not end in `.csv` and is not a directory\"\n\nA documentation constant for the NotCSVorDir exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.NOT_CSV_OR_PDF_OR_DIR_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.NOT_CSV_OR_PDF_OR_DIR_EXCEPTION","text":"NOT_CSV_OR_PDF_OR_DIR_EXCEPTION = \"the specified path does not end in `.csv` or `.pdf` and is not a directory\"\n\nA documentation constant for the NotCSVorPDForDir exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.NOT_PDF_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.NOT_PDF_EXCEPTION","text":"NOT_PDF_EXCEPTION = \"the specified path does not end in `.pdf`\"\n\nA documentation constant for the NotPDF exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.NOT_SIX_COLUMNS_EXCEPTION","page":"Constants","title":"PDFHighlights.Internal.Constants.NOT_SIX_COLUMNS_EXCEPTION","text":"NOT_SIX_COLUMNS_EXCEPTION = \"the row does not represent elements for 6 columns\"\n\nA documentation constant for the NotSixColumns exception.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.PAGES_ARGUMENT","page":"Constants","title":"PDFHighlights.Internal.Constants.PAGES_ARGUMENT","text":"PAGES_ARGUMENT = \"the pages vector\"\n\nA documentation constant for the pages argument.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.PATH_TO_C_LIBRARIES","page":"Constants","title":"PDFHighlights.Internal.Constants.PATH_TO_C_LIBRARIES","text":"PATH_TO_C_LIBRARIES = normpath(joinpath(@__DIR__(), \"..\", \"deps\", \"C\"))\n\nPath to the directory with C libraries.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.PATH_TO_GET_AUTHOR_TITLE_LIBRARY","page":"Constants","title":"PDFHighlights.Internal.Constants.PATH_TO_GET_AUTHOR_TITLE_LIBRARY","text":"PATH_TO_GET_AUTHOR_TITLE_LIBRARY = joinpath(PATH_TO_C_LIBRARIES, \"get_author_title\", \"get_author_title\")\n\nPath to the C library containing the get_author_title function.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.PATH_TO_GET_LINES_COMMENTS_PAGES_LIBRARY","page":"Constants","title":"PDFHighlights.Internal.Constants.PATH_TO_GET_LINES_COMMENTS_PAGES_LIBRARY","text":"PATH_TO_GET_LINES_COMMENTS_PAGES_LIBRARY = joinpath(PATH_TO_C_LIBRARIES, \"get_lines_comments_pages\", \"get_lines_comments_pages\")\n\nPath to the C library containing the get_lines_comments_pages function.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.PDF_ARGUMENT","page":"Constants","title":"PDFHighlights.Internal.Constants.PDF_ARGUMENT","text":"PDF_ARGUMENT = \"absolute or relative path to the PDF file\"\n\nA documentation constant for the pdf argument.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.TARGET_CSV_ARGUMENT","page":"Constants","title":"PDFHighlights.Internal.Constants.TARGET_CSV_ARGUMENT","text":"TARGET_CSV_ARGUMENT = \"a CSV file or a directory with PDF files\"\n\nA documentation constant for the target argument that mentions CSV.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.TARGET_PDF_ARGUMENT","page":"Constants","title":"PDFHighlights.Internal.Constants.TARGET_PDF_ARGUMENT","text":"TARGET_PDF_ARGUMENT = \"a PDF file or a directory with PDF files\"\n\nA documentation constant for the target argument that mentions PDF.\n\n\n\n\n\n","category":"constant"},{"location":"lib/internals/Constants/#Macros","page":"Constants","title":"Macros","text":"","category":"section"},{"location":"lib/internals/Constants/","page":"Constants","title":"Constants","text":"Modules = [PDFHighlights.Internal.Constants]\nOrder = [:macro]","category":"page"},{"location":"lib/internals/Constants/#PDFHighlights.Internal.Constants.@constant-Tuple{Symbol,String,Union{Expr, String}}","page":"Constants","title":"PDFHighlights.Internal.Constants.@constant","text":"@constant(name::Symbol, docstring::String, value::Union{Expr, String}) -> Expr\n\nCreate a constant with a documentation string and export it.\n\nArguments\n\nname::Symbol: name of the constant\ndocstring::String: documentation string\nvalue::Union{Expr, String}: value of the constant\n\nReturns\n\nExpr: constant definition\n\nExample\n\nusing PDFHighlights\nusing Suppressor\nusing SyntaxTree\n\nname = :CONSTANT_NAME\ndocstring = \"Docstring\"\nvalue = \"Value\"\n\nd1 = @capture_out @macroexpand(\n    PDFHighlights.Internal.Constants.@constant(\n        CONSTANT_NAME,\n        \"Docstring\",\n        \"Value\"\n    )\n) |> linefilter! |> dump\n\nmacro oof()\n    return esc(\n        quote\n            @doc $(docstring)\n            const $(name) = $(value)\n            export $(name)\n        end\n    )\nend\n\nd2 = @capture_out @macroexpand(@oof) |> linefilter! |> dump\n\nd1 == d2\n\n\n\n\n\n","category":"macro"},{"location":"manual/guide/#Guide","page":"Guide","title":"Package Guide","text":"","category":"section"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"The design of this package serves one purpose: to make exporting highlights from PDF files to a CSV file as simple as calling a single function. The format of the resulting file corresponds to the requirements defined by the Readwise service for the bulk import of CSV files. It makes it possible not only to extract and store highlights but also to benefit from them using spaced repetition.","category":"page"},{"location":"manual/guide/#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"The package is available in the General registry, so the installation is not different from the standard procedure: from the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"pkg> add PDFHighlights","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"note: Note\nAt the moment, the package requires the poppler-glib-dev library (a C library). You can install it like this:Linux:\nsudo apt-get update && sudo apt-get install -y --no-install-recommends libpoppler-glib-dev\nmacOS:\nbrew update && brew install popplerOn Windows, the only option, for now, is to use WSL.","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"note: Note\nDuring installation, the package compiles auxiliary shared C libraries. Check that you have a gcc compiler available. The build process can be restarted using build PDFHighlights in the Pkg REPL.","category":"page"},{"location":"manual/guide/#Importing","page":"Guide","title":"Importing highlights","text":"","category":"section"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"You can now import highlights from a PDF file or a directory containing PDF files using the import_highlights function:","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"using PDFHighlights\nimport_highlights(\"highlights.csv\", pdf)","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"This function prints to standard output. For example, for the PDF used for tests in this package, the output will be as follows:","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"using PDFHighlights\ndir = joinpath(pathof(PDFHighlights) |> dirname |> dirname, \"test\", \"pdf\")\npdf = joinpath(dir, \"TestPDF.pdf\")","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"import_highlights(\"highlights.csv\", pdf) # hide","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"Every highlight and associated metadata get represented by a row in a CSV file. These rows are generated by this function and discarded if identical rows already exist in the target file. Therefore, the reinvocation of this function gives the following output:","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"import_highlights(\"highlights.csv\", pdf) # hide","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"For this reason, the function name has a verb import: it allows you to update existing CSV files (obtained by this package, presumably) with new highlights. Third-party CSV files may be supported if they match the format.","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"An empty CSV file with a correct header can be created using the initialize function:","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"initialize(\"highlights.csv\")","category":"page"},{"location":"manual/guide/#Retrieving","page":"Guide","title":"Retrieving pieces","text":"","category":"section"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"For more crafty workflows, you can use the remaining functions from the public interface. They allow you to retrieve pieces of data related to highlights. Confusion of terminology may be here, as CSV files require slightly different field names. Here is a table showing what can you can extract from each file type:","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"\n<table style=\"width: fit-content; border-collapse: collapse;\">\n  <tbody>\n    <tr>\n      <th style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        CSV\n      </th>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Highlights\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Titles\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Authors\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        URLs\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Notes\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Locations\n      </td>\n    </tr>\n    <tr>\n      <th style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        PDF\n      </th>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Highlights\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Titles\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Authors\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        —\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Comments\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Pages\n      </td>\n    </tr>\n  </tbody>\n</table>\n","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"Each peace has its own function. For example, you can get a PDF title like this:","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"get_title(pdf)","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"This and some other functions have recursive analogs:","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"get_titles(dir)","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"There are also functions returning multiple pieces at once. For example, to get the author and the title:","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"get_author_title(pdf)","category":"page"},{"location":"manual/guide/","page":"Guide","title":"Guide","text":"See the full list of functions in the Extracting data section in the public interface description.","category":"page"},{"location":"manual/format/#CSVFormat","page":"Format","title":"CSV Format","text":"","category":"section"},{"location":"manual/format/","page":"Format","title":"Format","text":"The format of CSV files generated by the import_highlights and initialize functions corresponds to the format used by Readwise for bulk import of CSV files.","category":"page"},{"location":"manual/format/#Requirements","page":"Format","title":"Requirements","text":"","category":"section"},{"location":"manual/format/","page":"Format","title":"Format","text":"The following are the requirements for a CSV file set by the service:","category":"page"},{"location":"manual/format/","page":"Format","title":"Format","text":"One mandatory column: Highlight\nFive optional columns: Title, Author, URL, Note, Location\nQuotes escaping: \"\", not \\\".","category":"page"},{"location":"manual/format/","page":"Format","title":"Format","text":"The following are the requirements for the CSV file set by this package:","category":"page"},{"location":"manual/format/","page":"Format","title":"Format","text":"Six mandatory columns: Highlight, Title, Author, URL, Note, Location\nQuotes escaping: \"\", not \\\".","category":"page"},{"location":"manual/format/","page":"Format","title":"Format","text":"It means that the import_highlights function is programmed to retrieve all data related to the highlights, and will check for all columns when passing a third-party CSV file.","category":"page"},{"location":"#PDFHighlights.jl","page":"Home","title":"PDFHighlights.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Export highlights from PDF files to a CSV file with one call.","category":"page"},{"location":"","page":"Home","title":"Home","text":"\n<table style=\"width: fit-content; border-collapse: collapse;\">\n  <tbody>\n    <tr>\n      <th style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Code Coverage\n      </th>\n\n      <th style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        Repository & License\n      </th>\n    </tr>\n    <tr>\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        <a href=\"https://codecov.io/gh/paveloom-j/PDFHighlights.jl\" style=\"position: relative; bottom: -2px;\">\n          <img src=\"https://codecov.io/gh/paveloom-j/PDFHighlights.jl/branch/develop/graph/badge.svg\" />\n        </a>\n      </td>\n\n      <td style=\"text-align: center; border: 1px solid lightgray; padding: 6px 12px;\">\n        <a href=\"https://github.com/paveloom-j/PDFHighlights.jl\" style=\"position: relative; bottom: -2px;\">\n          <img src=\"https://img.shields.io/badge/GitHub-paveloom--j%2FPDFHighlights.jl-5DA399.svg\">\n        </a>\n        <a href=\"https://github.com/paveloom-j/PDFHighlights.jl/blob/master/LICENSE.md\" style=\"position: relative; bottom: -2px;\">\n          <img src=\"https://img.shields.io/badge/license-MIT-5DA399.svg\">\n        </a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"A package for exporting highlights (and related data) from PDF files and saving them to a CSV.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Import the highlights into a new or already created CSV file with one command\nConcatenate the highlights utilizing comments\nExtract any piece of the highlight from a PDF or CSV file","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = map(\n    s -> \"manual/$(s)\",\n    [\"guide.md\", \"format.md\", \"concatenation.md\"],\n)","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"lib/index.md\",\n    \"lib/public.md\",\n]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Internals\nPDF\nCSV\nBoth\nExceptions\nConstants","category":"page"}]
}
